#! /usr/bin/env python
import pathogenprofiler as pp
import json
import argparse
import malariaprofiler as mlp
import sys
from uuid import uuid4
from datetime import datetime
import os


def main_version(args):
    print("\Malaria profiler version %s\n" % mlp._VERSION)

def main_profile(args):
    conf = {
        "ref":"/home/jody/projects/malaria_profiler/pk/ref/strain_A1_H.1.Icor.fasta",
        "gff":"/home/jody/projects/malaria_profiler/pk/ref/strain_A1_H.1.Icor.gff3",
        "bed":"/home/jody/projects/malaria_profiler/pk/ref/genes.bed",
        "barcode":"/home/jody/projects/malaria_profiler/pk/ref/barcode.bed",
        "json_db":"/home/jody/projects/malaria_profiler/pk/ref/resistance_db.json",
        "snpEff_db":"pk",
        
    }
    args.tmp_prefix = str(uuid4())
    files_prefix = args.dir+"/"+args.tmp_prefix
    
    if args.bam==None:
        if args.read1 and args.read2:
            fastq_obj = pp.fastq(args.read1,args.read2)
        
        elif args.read1 and not args.read2:
            # Unpaired + trimming
            fastq_obj = pp.fastq(args.read1,args.read2)
        bam_obj = fastq_obj.map_to_ref(
            ref_file=conf["ref"], prefix=files_prefix,sample_name=args.prefix,
            aligner=args.mapper, platform=args.platform, threads=args.threads
        )
        bam_file = bam_obj.bam_file
    else:
        bam_file = args.bam

    results = pp.bam_profiler(conf=conf,bam_file=bam_file,prefix=files_prefix,platform=args.platform,caller=args.caller,run_delly=False,samclip=True)
    
    results["timestamp"] = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    json_output = f"{args.dir}/{args.prefix}.results.json"
    json.dump(results,open(json_output,"w"))

    result_files = {
        "%s.delly.bcf" % files_prefix: "%s/%s.delly.bcf" % (args.dir,args.prefix),
        "%s.targets.ann.vcf.gz" % files_prefix: "%s/%s.targets.ann.vcf.gz" % (args.dir,args.prefix),
        "%s.vcf.gz" % files_prefix: "%s/%s.vcf.gz" % (args.dir,args.prefix),
        "%s.bam" % files_prefix: "%s/%s.bam" % (args.dir,args.prefix),
        "%s.bam.bai" % files_prefix: "%s/%s.bam.bai" % (args.dir,args.prefix),
    }
    for file,target in result_files.items():
        if os.path.isfile(file):
            os.rename(file,target)

    pp.run_cmd("rm %s*" % files_prefix)

    pp.log("Profiling finished sucessfully!")

parser = argparse.ArgumentParser(description='TBProfiler pipeline',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--version', action='version', version="TBProfiler version %s" % mlp._VERSION)
subparsers = parser.add_subparsers(help="Task to perform")

# Profile #
parser_sub = subparsers.add_parser('profile', help='Run whole profiling pipeline', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
input=parser_sub.add_argument_group("Input options")
group = input.add_mutually_exclusive_group(required=True)
group.add_argument('--read1','-1',help='First read file')
input.add_argument('--read2','-2',help='Second read file')
group.add_argument('--bam','-a',help='BAM file. Make sure it has been generated using the H37Rv genome (GCA_000195955.2)')
input.add_argument('--platform','-m',choices=["illumina","nanopore"],default="illumina",help='NGS Platform used to generate data')
input.add_argument('--db',default='pk',choices=["pk"],help='Mutation panel name')
input.add_argument('--external_db',type=str,help='Path to db files prefix (overrides "--db" parameter)')

output=parser_sub.add_argument_group("Output options")
output.add_argument('--prefix','-p',default="malaria_profiler",help='Sample prefix for all results generated')
output.add_argument('--dir','-d',default=".",help='Storage directory')
output.add_argument('--csv',action="store_true",help="Add CSV output")
output.add_argument('--txt',action="store_true",help="Add text output")
output.add_argument('--pdf',action="store_true",help="Add PDF output. This requires pdflatex to be installed")
output.add_argument('--add_columns',default=None,type=str,help="Add additional columns found in the mutation database to the text and csv results")
output.add_argument('--add_mutation_metadata',action="store_true",help="Add mutation data from the tbdr database (not currently functional)")
output.add_argument('--call_whole_genome',action="store_true",help="Call whole genome")

algorithm=parser_sub.add_argument_group("Algorithm options")
algorithm.add_argument('--mapper',default="bwa", choices=["bwa","minimap2","bowtie2","bwa-mem2"],help="Mapping tool to use. If you are using nanopore data it will default to minimap2",type=str)
algorithm.add_argument('--caller',default="bcftools", choices=["bcftools","gatk","freebayes"],help="Variant calling tool to use.",type=str)
algorithm.add_argument('--calling_params',type=str,help='Override default parameters for variant calling')
algorithm.add_argument('--min_depth',default=10,type=int,help='Minimum depth required to call variant. Bases with depth below this cutoff will be marked as missing')
algorithm.add_argument('--af',default=0.1,type=float,help='Minimum allele frequency to call variants')
algorithm.add_argument('--reporting_af',default=0.1,type=float,help='Minimum allele frequency to use variants for prediction')
algorithm.add_argument('--coverage_fraction_threshold',default=0,type=int,help='Cutoff used to calculate fraction of region covered by <= this value')
algorithm.add_argument('--missing_cov_threshold',type=int,help='Cutoff used to positions/codons in genes which are missing (this argument has now been merged with --min_depth argument and will be deprecated in future releases)')
algorithm.add_argument('--no_trim',action="store_true",help="Don't trim files using trimmomatic")
algorithm.add_argument('--no_flagstat',action="store_true",help="Don't collect flagstats")
algorithm.add_argument('--no_delly',action="store_true",help="Don't run delly")
algorithm.add_argument('--threads','-t',default=1,help='Threads to use',type=int)

other=parser_sub.add_argument_group("Other options")
other.add_argument('--verbose','-v',default=0, choices=[0,1,2],help="Verbosity increases from 0 to 2",type=int)
other.add_argument('--version', action='version', version="Malria profiler version %s" % mlp._VERSION)
other.add_argument('--no_cleanup',action="store_true",help="Don't remove temporary files on error")
other.add_argument('--delly_bcf',help=argparse.SUPPRESS)
parser_sub.set_defaults(func=main_profile)


parser_sub = subparsers.add_parser('version', help='Output program version and exit', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser_sub.set_defaults(func=main_version)


args = parser.parse_args()
if vars(args)=={}:
    parser.print_help(sys.stderr)
else:
    args.func(args)

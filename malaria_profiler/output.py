
from collections import defaultdict
import os
from typing import DefaultDict
import pathogenprofiler as pp
from pathogenprofiler import filecheck
import csv
import time
from tqdm import tqdm
import json
import jinja2
import logging
from .models import ProfileResult


def write_outputs(args,result: ProfileResult):
    logging.info("\nWriting outputs")
    logging.info("---------------")
    json_output = args.dir+"/"+args.prefix+".results.json"
    text_output = args.dir+"/"+args.prefix+".results.txt"
    csv_output = args.dir+"/"+args.prefix+".results.csv"
    logging.info(f"Writing json file: {json_output}")
    open(json_output,"w").write(result.model_dump_json())

    if args.txt:
        logging.info(f"Writing text file: {text_output}")
        write_text(result,args.conf,text_output)
    if args.csv:
        logging.info(f"Writing csv file: {csv_output}")
        write_text(result,args.conf,csv_output,sep=",")



default_template = """
Malaria-Profiler report
=================

The following report has been generated by Malaria-Profiler.

Summary
-------
ID{{d['sep']}}{{d['id']}}
Date{{d['sep']}}{{d['date']}}

Species report
-----------------
{{d['species_report']}}

{%- if 'geoclassification' in d %}
Geoclassification report
-----------------
{{d['geoclassification']}}
{% endif %}

{% if  'dr_report' in d %}
Resistance report
-----------------
{{d['dr_report']}}

Drug resistance variants report
---------------------
{{d['dr_var_report']}}

Other variants report
---------------------
{{d['other_var_report']}}

QC fail variants report
-----------------------
{{d['qc_fail_var_report']}}

Coverage report
---------------------
{{d['coverage_report']}}

Missing positions report
---------------------
{{d['missing_report']}}
{% endif %}

Analysis pipeline specifications
--------------------------------
Pipeline version{{d['sep']}}{{d['version']}}
Species Database version{{d['sep']}}{{d['species_db_version']}}
Resistance Database version{{d['sep']}}{{d['resistance_db_version']}}

{{d['pipeline']}}
"""

species_template = """
Malaria-Profiler report
=================

The following report has been generated by Malaria-Profiler.

Summary
-------
ID{{d['sep']}}{{d['id']}}
Date{{d['sep']}}{{d['date']}}

Species report
-----------------
{{d['species_report']}}

Analysis pipeline specifications
--------------------------------
Pipeline version{{d['sep']}}{{d['version']}}
Species Database version{{d['sep']}}{{d['species_db_version']}}

{{d['pipeline']}}
"""

def load_text(text_strings,template = None,file_template=None):
    
    if file_template:
        template = open(file_template).read()

    t =  jinja2.Template(template)
    return t.render(d=text_strings)

def write_text(
        result: ProfileResult,
        conf: dict,
        outfile: str,
        sep: str ="\t",
        template_file: str = None
    ):
    text_strings = {}
    text_strings["id"] = result.id
    text_strings["date"] = time.ctime()
    if result.species.prediction_method=='user_defined':
        text_strings['species_report'] = f'User defined species: {result.species.species[0].species}'
    else:
        raise NotImplemented
        text_strings['species_report'] = pp.dict_list2text([d.prediction_info for d in result.species.species],mappings={"species":"Species","accession":"Accession","ani":"ANI","abundance":"Abundance"},sep=sep)
    


    if isinstance(result, ProfileResult):
    
        template_string = default_template
        summary_table = pp.get_dr_summary(result.dr_variants,conf)

        text_strings["notes"] = "\n".join(result.notes)
        text_strings["dr_report"] = pp.dict_list2text(summary_table,sep=sep)
        text_strings["dr_var_report"] = pp.object_list2text(result.dr_variants,mappings={"pos":"Genome Position","gene_id":"Locus Tag",'gene_name':'Gene name',"type":"Variant type","change":"Change","freq":"Estimated fraction","drugs.drug":"Drug"},sep=sep)
        text_strings["other_var_report"] = pp.object_list2text(result.other_variants,mappings={"pos":"Genome Position","gene_id":"Locus Tag",'gene_name':'Gene name',"type":"Variant type","change":"Change","freq":"Estimated fraction"},sep=sep)
        text_strings['qc_fail_var_report'] = pp.object_list2text(result.fail_variants,mappings={"pos":"Genome Position","gene_id":"Locus Tag",'gene_name':'Gene name',"type":"Variant type","change":"Change","freq":"Estimated fraction"},sep=sep)
        text_strings["coverage_report"] = result.get_qc()

    else:
        template_string = species_template

    if sep=="\t":
        text_strings["sep"] = ": "
    else:
        text_strings["sep"] = ","

    with open(outfile,"w") as O:
        O.write(load_text(text_strings,template_string,template_file))

def _write_text(json_results,conf,outfile,columns = None,sep="\t",template_file=None):
    
    text_strings = {}
    text_strings["id"] = json_results["id"]
    text_strings["date"] = time.ctime()

    if "dr_variants" not in json_results:
        return write_species_text(json_results,outfile)
    if "drugs" in conf:
        json_results = pp.get_summary(json_results,conf,columns = columns)
        json_results["drug_table"] = [[y for y in json_results["drug_table"] if y["Drug"].upper()==d.upper()][0] for d in conf["drugs"]]
        text_strings["dr_report"] = pp.dict_list2text(json_results["drug_table"],["Drug","Genotypic Resistance","Mutations"]+columns if columns else [],sep=sep)
    for var in json_results["dr_variants"]:
        var["drug"] = ", ".join([d["drug"] for d in var["drugs"]])
    if json_results["species"] is not None and len(json_results["species"])>0:
        text_strings["species_report"] = pp.dict_list2text(json_results["species"],["species","mean"],{"species":"Species","mean":"Mean kmer coverage"},sep=sep)
    if "geoclassification" in json_results:
        text_strings["geoclassification"] = ", ".join(json_results["geoclassification"])

    default_columns = {
        "chrom":"Chromosome",
        "genome_pos":"Genome Position",
        "gene":"Gene name",
        "locus_tag":"Locus Tag",
        "type":"Variant type",
        "change":"Change",
        "depth":"Depth",
        "freq":"Estimated fraction",
    }
    drug_columns = default_columns.copy()
    drug_columns["drugs.drug"] = "Drug"

    text_strings["dr_var_report"] = pp.dict_list2text(json_results["dr_variants"],mappings=drug_columns,sep=sep)
    text_strings["other_var_report"] = pp.dict_list2text(json_results["other_variants"],mappings=default_columns,sep=sep)
    text_strings["qc_fail_var_report"] = pp.dict_list2text(json_results["qc_fail_variants"],mappings=default_columns,sep=sep)

    qc_columns = {
        "region":"Region",
        "gene_id":"Gene ID",
        "pct_depth_pass":"% of region with depth >= soft depth cutoff",
        "median_depth":"Median depth"
    }

    text_strings["coverage_report"] = pp.dict_list2text(json_results["qc"]["region_qc"], qc_columns ,sep=sep) if "region_qc" in json_results["qc"] else "N/A"

    missing_columns = {
        "position":"Position",
        "locus_tag":"Locus Tag",
        "gene":"Gene name",
        "variants":"Variants",
        "drugs":"Drugs"
    }

    text_strings["missing_report"] = pp.dict_list2text(json_results["qc"]["missing_positions"],missing_columns,sep=sep) if "missing_positions" in json_results["qc"] else "N/A"
    text_strings["pipeline"] = pp.dict_list2text(json_results["pipeline_software"],["Analysis","Program"],sep=sep)
    text_strings["version"] = json_results["software_version"]
    if "species" in json_results:
        text_strings["species_db_version"] = "%(name)s_%(Author)s_%(Date)s" % json_results["species"]["species_db_version"] if (json_results['species'] and ("species_db_version" in json_results['species'])) else "N/A"
    text_strings["resistance_db_version"] = "%(name)s_%(Author)s_%(Date)s" % json_results["resistance_db_version"] if "resistance_db_version" in json_results else "N/A"
    if sep=="\t":
        text_strings["sep"] = ": "
    else:
        text_strings["sep"] = ","

    with open(outfile,"w") as O:
        O.write(load_text(text_strings,default_template,template_file))


def write_species_text(json_results,outfile,sep="\t",template_file=None):
    text_strings = {}
    text_strings["id"] = json_results["id"]
    text_strings["date"] = time.ctime()
    text_strings["species_report"] = pp.dict_list2text(json_results["species"]["prediction"],["species","mean"],{"species":"Species","mean":"Mean kmer coverage"},sep=sep)
    if "mash_closest_species" in json_results:
        text_strings["mash_species_report"] = pp.dict_list2text(json_results["mash_closest_species"]["prediction"],{"accession":"Accession","species":"Species","mash-ANI":"mash-ANI"},sep=sep)
    text_strings["pipeline"] = pp.dict_list2text(json_results["pipeline_software"],["Analysis","Program"],sep=sep)
    text_strings["version"] = json_results["software_version"]
    text_strings["species_db_version"] = "%(name)s_%(Author)s_%(Date)s" % json_results["species"]["species_db_version"]
    if sep=="\t":
        text_strings["sep"] = ": "
    else:
        text_strings["sep"] = ","
    with open(outfile,"w") as O:
        O.write(load_text(text_strings,species_template,template_file))





def collate(args):
    # Get a dictionary with the database file: {"ref": "/path/to/fasta" ... etc. }
    
    if args.samples:
        samples = [x.rstrip() for x in open(args.samples).readlines()]
    else:
        samples = [x.replace(args.suffix,"") for x in os.listdir(args.dir) if x[-len(args.suffix):]==args.suffix]


    # Loop through the sample result files    
    species = {}
    dr = defaultdict(lambda: defaultdict(list))
    drugs = set()
    dr_samples = set()
    sample_data = defaultdict(dict)
    for s in tqdm(samples):
        # Data has the same structure as the .result.json files
        data = json.load(open(filecheck("%s/%s%s" % (args.dir,s,args.suffix))))
        if "species" in data and data['species']:
            species[s] = ";".join([d["species"] for d in data["species"]["species"]])
        else:
            species[s] = None
        sample_data[s]['region_median_depth'] = data["qc"]["region_median_depth"]
        if "resistance_db_version" in data:
            dr_samples.add(s)
        
            for var in data["dr_variants"]:
                for d in var["drugs"]:
                    drugs.add(d["drug"])
                    dr[s][d["drug"]].append(f"{var['gene']}_{var['change']}")

    results = []
    for s in samples:
        result = {
            "id": s,
            "species": species[s],
            "region_median_depth": sample_data[s]['region_median_depth']
        }
        for d in sorted(drugs):
            if s in dr_samples:
                if d in dr[s]:
                    result[d] = ";".join(dr[s][d])
                else:
                    result[d] = ""
            else:
                result[d] = "N/A"
        results.append(result)
    
    if args.format=="txt":
        args.sep = "\t"
    else:
        args.sep = ","

    with open(args.outfile,"w") as O:
        writer = csv.DictWriter(O,fieldnames=list(results[0]),delimiter=args.sep)
        writer.writeheader()
        writer.writerows(results)
